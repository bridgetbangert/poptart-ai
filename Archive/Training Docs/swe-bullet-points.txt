The ultimate guide to writing your Resuume for Software 
Engineer roles (self.cscareerquestions)
submitted 1 month ago * by EngineeredCoconutSenior 
Software Engineer
NOTE: I needed that typo in the title because otherwise 
it wont let me post this.
I have been reviewing a lot of resumes in the Resume 
Advice Threads, and there's a lot of bad resumes in 
there. I find myself repeating same few suggestions, so I 
figured I will just write this guide and link it 
henceforth.
Who is this for?
This guide will apply to resumes for most internships, 
entry-mid level, and early Senior SE roles. Once you are 
a late Senior or Staff+ your resume gets very long and 
you focus on different things, so this guide no longer 
applies. Also if you are a Staff SE you are not asking 
for resume advice on reddit.
This is also specific to the US and Canada regions, as 
other countries often have different resume formats.
Template
The template you use for your resume should be:

    Easily parsable by the ATS
    Easily skimmable by the recruiter, hiring manager, 
and interviewers

The ideal template looks like: 
https://www.overleaf.com/latex/templates/jakes-resume/syzfjbzwjncs
You don't have to use that exact template and you don't 
have to use Latex. You can use or make your own in Google 
Docs or Word. The common characteristics is:

    Single column layout. Makes it easy for most ATS to 
parse. Streamlines flow of reading from top to bottom. 
Makes it easy to skim.
    No icons or images. Makes it easy for most ATS to 
parse.
    Clear section separation. Makes it easy to skim.
    Bullet points and not paragraphs. Makes it easy to 
skim.
    Comma separated skills. Makes it easy to skim.
    No icons or images. Makes it easy for most ATS to 
parse.

Note that you are applying to SE roles, so the aesthetics 
of your resume resume does not matter at all, even if you 
are a FE. You are not being hired as graphic or product 
designer, your resume does not need to be flashy or 
eye-catching. It just needs to highlight your technical 
skills as densely and concisely as possible.
Export and submit as PDF.
Section order
If you are a new grad or entry level, you should go with: 
Education > Experience > Projects > Skills
If you are mid-senior, you should go with: Experience > 
Projects > Education > Skills
Bullet Points
This is where most people mess up their resume. Everyone 
should read 
https://www.levels.fyi/blog/applying-star-method-resumes.html 
to get an understanding of how to craft your bullet 
points.
The goal of your bullet points is to:

    Highlight the technical work which you have done.
    Highlight any domains you have had exposure to 
(building UI, building SDKs, building web services, 
interacting with cloud providers, working with databases, 
etc.).
    Highlight technical challenges you faced and 
overcame.
    Highlight the impact of your work.

Bullet points review
In order to demonstrate this, I am going to pull some 
real bullet points from actual resumes submitted for 
review, and go over why they are bad.
Developed backend web and mobile applications using Ionic 
with a Node.js backend
This is too vague and does not highlight any of the 
technical work the candidate did. What specifically did 
they work on on the backend? What does the backend do? 
Did they work on the API, data layer, caching? Which 
parts of the mobile application did they work on? Was 
there any impact from developing this?
Developed SpringBoot microservices capable of bringing a 
user quote to insurance policy
This is too vague and does not highlight any of the 
technical work the candidate did. Which specific service 
did they work on? What technical work did they do to 
develop this microservice? What was the process of making 
it capable of doing that? What was the most complex 
problem they had to solve in order to build this?
Developed and maintained user-friendly React-Native based 
restaurant decision-making mobile application
This is too vague and does not highlight any of the 
technical work the candidate did. What specifically did 
they develop? What made it user-friendly? How did they 
implement the decision-making feature? What happened 
after developing this app, was it successful and led to a 
lot of growth?
Worked on an international team on various b2b projects 
built using Angular
This is too vague and does not highlight any of the 
technical work the candidate did. What were the projects? 
What was the technical work that they did? What technical 
challenges did they face and overcome?
Drove $5M in revenue by completely automating the data 
retrieval process for 6+ GB of data per month
This one is better since it has impact and some specs, 
buts still missing some technical details. But what did 
the automation entail? How did the candidate automate 
these tasks, did it involve programming scripts or using 
off-the-shelf software?
Here's an example of some good bullet points:
Developed a back end web service to handle user 
authentication utilizing JWT and interacting with 
existing user services to store sessions data in a Redis 
cache, leading to a 14% reduction in complaints about 
dropped sessions
Developed a React-Native based mobile application by 
collaborating with product design teams, interacting with 
a GraphQL API allowing users to navigate and make orders 
to local restaurants. Led to better user engagement 
according to analytics funnels
Led the development of a data pipelines platform 
utilizing Kafka streams, ingesting data from various data 
stores from across the application. Resulted in a more 
streamlined developer experience for data query teams and 
reducing congestion by 24% during peak hours
You want to highlight the actual technical work you did 
instead of just name dropping some language/framework 
name, and try to lead into some impact your work made if 
you know it/can dig it out. You should pick the most 
impressive / technically challenging you have done at a 
role, and highlight your technical work in detail in your 
bullets. Your bullets don't have to be a long run-on 
sentence, you can have multiple sentences per bullet. 
Just try to keep it a max of 2 so that it doesn't become 
a paragraph.
You can have 3-5 bullets per role, more if you were there 
for a very long time.
You should also avoid any meaningless fluff bullet 
points. Things like "attended meetings, attended 
standups, used git, did code reviews, wrote unit tests" 
do not need to be bullet points as everyone does these.
Technical Skills
Your skills section should just be a comma separated 
list. You can have certain sub-categories such as 
"Languages" and "Frameworks", etc. to organize it better. 
You don't need to give yourself a proficiency rating. 
Calling yourself "intermediate" or 4/5 in Java does not 
mean anything. What is "intermediate" for you can be 
completely different from what the HM considers 
intermediate.
Projects
I always skip this section when reading resumes from 
candidates because it is always just full of school 
coursework and tutorials they followed to build a clone 
or something.
If you want your projects to stand out, they should be 
real projects. Something that someone uses to solve a 
problem. Something that has users (can be just you, as 
long as you use it often) and is actively maintained and 
isn't just rotting in a GitHub repo, never to see a PR 
for the rest of it's life.
Education
Keep this section simple. Your degree name (Bachelors of 
Science in Computer Science, etc.), university name, 
university location (City, State), and graduation date 
(Month, Year). For internships you should list your GPA. 
For entry level it's optional. From mid-level onwards 
just drop your GPA.
You don't need to list which courses you took. We know 
what courses a BS in CS has. If you do want to list 
coursework, only list any cool electives you have taken. 
Otherwise leave it out.
Conclusion
Basically, use a proper template. Make sure your bullets 
actually highlight your technical ability, instead of 
being super vague and just a string of concatenating 
buzzwords. That's all there is to it. Make it easy for 
hiring managers like me to go "Oh, they did X Y and Z, 
they seem like they would be a good fit!" instead of 
making us go "I have no idea if this person has even done 
any coding in their entire career".
Hiring managers, interviewers, tech recruiters, feel free 
to share other tips and tricks in the comments and 
suggest edits to this guide.

