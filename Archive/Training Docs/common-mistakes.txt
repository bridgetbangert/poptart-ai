
Common mistakes from reviewing 1000+ Tech resumes: 
Kleiner Perkins Fellows 2022

Mar 6, 2022 • 2 years ago • 17 min read
Recommended resource on Reddit's r/EngineeringResumes 
alongside popular resume template Deedy CV

The Kleiner Perkins Fellows program is a fellowship for 
all of Engineering, Product and Design which gives 
students the opportunity to intern at a portfolio of 
early and late stage startups while being able to engage 
and learn from a broader community of other students’ 
startup experiences. The fellowship is geared towards 
those not just with solid technical skills, but exemplary 
leadership and strong evidence of a self-directed 
entrepreneurial mindset. As a KP Engineering Fellow in 
2014 myself, I currently work at an early-stage 
Kleiner-funded Series B startup called Glean where I was 
on the founding team. Many ex-fellows have gone on to do 
some amazing things, including founding large, growing 
startups like Figma, OpenSea and Persona, holding senior 
positions at Doordash, Duolingo and Quip and going on to 
do PhDs at Stanford, MIT (HCI, Bio, CS) and Harvard, and 
many, many more.
A small selection of some past Kleiner Perkins Fellows.

Statistically, the KP Fellows program now has 2500+ 
applicants from 215+ universities primarily in the US and 
Canada and last year they had a total of 102 fellows, 71 
in Engineering, 13 in Design and 18 in Product. That’s a 
~4% acceptance rate. Of these applicants, 40% are female 
and 60% are upperclassmen (or Masters students). Since 
it’s inception in 2012, Kleiner has produced 732 fellows 
over 10 years.

I’ve been on the selection committee for the Kleiner 
Perkins Fellowship for several years now and have 
conducted 100+ technical and behavioral interviews across 
the fellowship and my experience at Glean, Google and 
Facebook. Prior to the semi-final stage of the KP 
Fellowship, I scan through 1000s of resumes for this and 
have the dubious distinction of having created a 
semi-viral resume template of my own a long time ago. 
When I was an applicant, I found applying to jobs and 
programs like this to be a stressful, byzantine process 
with limited insight into how it works on the other side. 
As a judge now, I thought it would be valuable to point 
out certain things that applicants to technology 
companies should keep in mind when they approach this 
process.
How the Process Works

Kleiner Perkins Fellows applications are rolling and 
decisions are made typically around April-June. 
Candidates submit 2 personal statements, a resume, domain 
challenges based on the track they’re applying for, and 
personal links (i.e. medium, youtube, twitter, github, 
etc.). During this review, a sizable percentage of 
candidates are filtered out easily because:

    They didn’t complete the domain challenge
    They didn’t answer the essay prompts
    Their field of specialization doesn’t particularly 
lend itself to what the role requires

Applications are reviewed by the selection committee 
which comprises KP Fellow alumni who look for qualities 
such as: technical characteristics, leadership, 
entrepreneurship and communication skills. Reviewers are 
allowed several “Bets” on candidates who may not fit the 
typical criteria but have a phenomenal story to tell. As 
an applicant, I would think that this is 
anti-meritocratic behavior, but now that I’m on the other 
side, some of these stories are truly inspiring and if 
other applicants had the chance to read them, they’d 
agree. Then, by around March, you move on to interviews 
both with the Fellows in the semi-finalist round and with 
KP portfolio companies you’re interested in. On occasion, 
candidates have already accepted an offer from a port-co 
and only need to pass the semi-finalist interview. After 
these interviews, final decisions are made and released 
to the public.
Common Resume Mistakes

Before I list out specifics, I ask that you take a couple 
minutes to empathize with the job of the reviewer. 
They’re spending valuable time on a weekday or weekend 
outside their hectic daily schedule to voluntarily review 
a boat load of applications. This process isn’t perfect. 
We know that humans recognize patterns and biases may 
come into play. That said, each member of the selection 
committee is educated thoroughly on understanding these 
biases. Every candidate will also have their application 
reviewed ~3-4 times from various members of the selection 
committee. Remember that while there are many things you 
can do to increase your chances, sometimes you just have 
a bad reviewer having a bad day. If the entire process 
were to be repeated with the same applicant pool, I 
imagine the results could turn out differently.

For the purpose of this post, I’ll be writing 
specifically about some common resume mistakes for 
applicants to the Engineering Fellowship.

    Don’t expect a reviewer to spend more than 5 minutes 
on your resume. We know that resumes are a pretty poor 
representation of a person’s potential which is why they 
ask for two personal statements, a domain challenge, and 
personal links. From what I’ve seen from reviewing a 
large volume of applications, I know that there are times 
when I anchor on certain patterns to move quickly. We 
don’t have hard and fast rules. Sometimes, I skip in 30 
seconds (of course, we require more time to review the 
candidate’s personal statements). Sometimes, if I see an 
appealing format, I click into more links to learn more 
and visit the candidate’s website, LinkedIn, Github and 
more. Contrary to urban legend, there’s never a need to 
visit a candidate’s personal social media.


    We look for more than college, GPA and brand-name 
internships. Our goal is to build a diverse and 
entrepreneurial cohort. We know that things like brand 
name internships, GPA, Ivy League are not a good measures 
of success and have held less weight over the years as we 
try to find the next generation of leaders. However, when 
reviewers have to go through a lot of resumes, humans 
tend to look for patterns which they think have high 
signal to noise ratio. Given how hard it is to assess a 
listed programming language skill, a listed course, 
Github projects and the actual work you have done at a 
past company, sometimes reviewers may anchor on these 
basics. We look beyond colleges, internships, grades, and 
have a focus on finding unobvious candidates as talent 
can be found anywhere but opportunity is not. We ensure 
applications are received 3-4 times to counter this bias.


    If your experiences are mixed, make sure it tells a 
cohesive story. We love to see a broad and diverse range 
of academic and professional interests. We see a lot of 
double majors (the most common one today is Computer 
Science and Economics), a variety of internships, and a 
broad range of activities. While we love people with 
well-rounded interests, it’s also important that your 
application tells a cohesive story. Sometimes, too varied 
an experience can prevent you from standing out at 
anything in particular.


    Repeatability is underutilized. People like to put 
people in buckets. When reviewing a resume, if I see 
multiple projects that involve donations to charity, I 
believe that this person is genuinely interested in that. 
If I see multiple web3 projects, I believe this person 
genuinely cares about web3. Use repeatability in your 
resume across the different sections to tell a coherent 
story.


    Using class projects as “Projects” may seem like a 
hack. One of the coolest things about Computer Science is 
that with a laptop and internet, you have the resources 
to pretty much build anything you want. It’s a blank 
canvas to be creative and useful. Doing a cool or nifty 
project on your own, especially one that solves a 
critical problem for yourself and others, is a strongly 
positive signal. That said, it’s important to distinguish 
between projects that you did off of your own accord and 
projects you did for class. Using class projects as 
“projects” seems like a hack. Often, these may have a lot 
of boilerplate code, don’t typically demonstrate that you 
sought out an interesting problem, and don’t exhibit 
creativity. How do we know they’re class projects? 
Because your other friends from that college use eerily 
familiar words to describe it. That said, not all class 
projects are bad and occasionally classes allow you to 
make your own project. I’d just appreciate it if class 
projects were clearly labeled as such.


    Be thoughtful when using the term Co-Founder. It can 
be very confusing to me when applicants call themselves a 
Co-Founder of a project. It also doesn’t make much sense 
to see a current, full-time startup co-founder is 
currently applying to internships. Of course, this 
doesn’t apply to clubs, podcasts, non-profits, and more! 
Use your judgment wisely. Based on what I’ve seen in the 
industry, here are some conditions that make you eligible 
to be called Co-Founder of a startup:
        Solves a problem and has relevant traction to 
support it
        Whatever you do makes money, or has a path to it
        You raised venture capital
        You have at least 1 person on payroll


    Controversial: I like seeing a glimmer of 
personality. Are you an athlete? Did you do something 
unique? Is there something outside of work you’re good 
at? What sets you apart? What’s your main thing other 
than the gig you’re applying for? As someone who works at 
a startup, it’s very important to work with people who 
are competent but also cool and interesting. I like 
seeing things like these to validate that you’re not just 
buried behind a computer your whole life (and even so, 
there are so many awesome niches to explore digitally 
too).


    Personally, I like seeing published research in good 
journals. There may be other reviewers who don’t care for 
it, but to me it signals a high level of dedication to a 
problem that is vetted. Others are of the school of 
thought that good research is not a signal for good 
engineering.


    Personally, I like seeing Olympiads and competitions. 
Candidates who participated and excelled in USAMO, USACO, 
or AIME, IMO, IOI, or their respective country’s national 
or international olympiad in Math, Physics, Computer 
Science, Chemistry or Linguistics usually possess deep 
problem solving ability. Olympiads that are not stepping 
stones to the official international olympiads usually 
aren’t as credible.


    Resume formats kinda matter. A bad resume, usually 
one which looks like they printed a Word doc to a pdf can 
be hard to review. When applying to technology companies, 
I don’t think anyone minds colors on your resumes. If 
you’re a designer, and your resume design is poor, I 
might think twice. Don’t cram too much text in your 
resume. A good resume won’t make your entire application, 
but it does send a soft signal that this person went out 
of their way to create this. It leaves a subtle mark of 
competence in the reviewer’s mind no matter how unbiased 
they try to be. Smart people can still have poorly 
formatted resumes but it handicaps their odds 
unnecessarily.


    Links are necessary, but might not get clicked as 
often as you think. I know reviewers who meticulously 
click links to dig deeper into an interesting project or 
website. Personally, I wish I clicked them more, but the 
cost of context switching, inability to click on links 
while using Preview to view a resume, the varying formats 
of different personal webpages, and the sheer time it 
ends up taking makes it something I do only for certain 
candidates that pique my interest.


    Let me tell you a long list of project clichés. Not 
all of them are bad. It’s really difficult to evaluate 
the competency of projects, so I wish candidates would 
brag more. Attach a link. Attach a Github repo. How many 
downloads did it get? Views? Did it feature in an article 
or HackerNews? How many users does it have? Does it make 
money? Was it #1 on the App Store? What languages or 
frameworks did you use to make this? Personally, I like 
projects that seem genuine and not resume-padding - does 
it solve a minor but real user need you probably faced? 
Not the class of “hammer looking for a nail” projects 
where you use a fancy technology for no practical 
purpose. Here’s an extended list:
        Games and AI solvers for games: Scrabble, Chess, 
Pokemon, Chinese Chess, Connect4, Sudoku, Mazes, 2048, 
Wordle, Poker, Othello, Blackjack, Checkers, Breakout, 
Tetris - Impressive if not for a class, depending on the 
game. I see a lot of “minimax with alpha-beta pruning”. 
Waiting for someone to make one for Catan!
        Course plan visualizer for their college - I find 
this very impressive, especially if they have a working 
link and other students actively use it.
        “I trained a model for X to do Y” - Very hard to 
evaluate, and I assume you ran <100 lines of code in a 
Python notebook most of the time. Variations: Image 
colorizer, object detection, text summarizer, predicting 
diseases, OCR, speech to text
        “Co-Founder at personal project” - very confusing 
to me.
        Sign language to text - An eerily common theme. I 
am fairly neutral to this project, because like ML 
projects, the quality makes or breaks it, and I can’t 
judge the quality.
        An iOS / Android app - I like it, but I cannot 
tell if it’s good unless you tell me how many downloads 
it has.
        Facebook / Twitter / Messenger clones - Mixed. 
These are common college class projects.
        Text summarizer - Too hard to evaluate. Seems 
like you plugged-and-played an ML model.
        “Covid tracker” - Impossible to evaluate, 
especially without a website to go to.
        Stock market predictor - Another classic cliche. 
Also impossible to evaluate or trust any results.
        ChatBots - Hard to tell if essentially a few 
if-statements, or more robust than that.
        Speed Reader - Interesting how common this is! I 
think this is quite cool albeit simple because it’s 
usually indicative that this person hacks on stuff for 
themselves
        “Mental health app that provides resources for 
XYZ” - It’s unclear to me what this means in practice
        Haiku generator / Text generator - I actually 
like these because it indicates you are passionate about 
coding for fun
        Web3 projects - DAOs, NFTs, Trading bots - I’m 
not sure how to evaluate these without seeing some impact 
numbers.


    “Objective”, address, citizenship status, and other 
minor things etc
        Please don’t have your resume spill over to two 
pages unless you have so much published research that you 
require this.
        Objective / Summary - definitely not necessary, 
but if you have a very specific interest or location 
restriction, I could see it being useful. Don’t add if 
you’re going to say something generic like “high-impact 
leadership role which combines business and engineering”. 
Please keep it short - one line, preferably.
        Address - These days, absolutely unnecessary.
        Citizenship status - I imagine this information 
is useful for a certain subset of employers, although 
typically I’ve not seen it make a difference for Software 
Engineering roles.
        Github link - Please have one.
        Website - I think it helps, and you should have 
one if you’re a Computer Science major, even if it’s a 
static github.io. Using Squarespace as a CS major is a 
poor look.
        Coursework - I understand it’s pretty typical to 
list, but if I have to be honest, I don’t think I have 
ever read this section.
        Please don’t list Excel and Word as your Skills

Making Your Resume Stand Out

Listing a long list of “don’t”s without a few “dos” is 
probably not the most helpful. While most application 
reviewers agree on what they don’t like to see, I 
hesitate more to make sweeping statements with regards to 
“dos” because reviewers can vary significantly in what 
they do like to see. If I had to chime in with a single 
data point, I’d advise:

    Formatting
        Don’t shy away from using a colorful, unique 
resume format.
        Keep it in one page unless you have plentiful 
published research.
        Don’t use so many colors that it hurts the eyes.
        Avoid skill pie charts or percentage skill bar 
graphs. They’re meaningless.
        Resumes formatted with LaTeX instead of Word show 
me you put in an effort.
        Ensure the PDF links to all the relevant places 
it needs to - your website, your github, your social 
links, etc. Make sure none of those links are broken.
    Education
        Generic coursework is usually unhelpful and 
consumes unnecessary space. List only unique, challenging 
ones.
        When you list a scholarship or an award, it would 
be nice to have some context on how many people get that 
award and what it’s for.
        I’d encourage you to list your GPA, and not 
forget to list the correct denominator. List your major 
GPA if it’s significantly better than your overall.
        If you have an accurate gauge or award that 
reflects your percentile in class, list it.
    Projects
        A project only feels real if you link to a demo 
and a Github.
        I love to see people brag about their projects. 
Tell me if it was #1 on the App Store, featured on Hacker 
News or Reddit, has many views, or has 100s of stars on 
Github. I want to know if people loved it! This makes 
your resume stand out more than just an internship at 
Google.
    Work
        If your internship touched a public consumer 
product, I’d like to know where.
        If you did multiple internships at the same time, 
an explanation would be nice.
        If you have a long-standing personal “job” over 
many years, please list it as part-time.
        Mention if you got a return offer!
        Don’t exaggerate. As full time employees, we know 
what projects interns typically get - don’t use your 
team’s entire mandate as a proxy for the work you did.
    Other
        There is no need to list Word and Excel as 
skills. I’m pretty on the fence about CSS and HTML too.
        Personally, I like seeing cool interests. List 
them! If you’re really good at something like chess or 
rock climbing, throw in a rating or a climbing grade.
        Not many people do this, but if you have a bunch 
of public media features for things you’ve done, be it 
Youtube, a blog post (hopefully not your own), a news 
article, or more, list it with a link!

Application Statistics

These top of funnel application numbers are for the 
Engineering Fellowship (interns).
Distribution of Gender

    Male: 61%
    Female: 39%

Distribution of Year

    2021 (Masters): <1%
    2022 (Senior): 8%
    2023 (Junior): 46%
    2024 (Sophomore): 30%
    2025 (Freshman): 15%

Distribution of Degrees

    Computer Science: 68%
    Engineering: 15%
    Math: 3.5%
    Other: 13.4%

Distribution of Bachelors Programs (engineering only)

Of a total 785 reported after the first round of 
filtering, here are the 10 colleges with the most 
candidates:

    University of California, Berkeley: 11%
    Stanford University: 6.4%
    University of Southern California: 5.7%
    University of Pennsylvania: 5.1%
    Georgia Institute of Technology: 4.7%
    University of Texas, Austin: 4.6%
    University of Waterloo: 4%
    Columbia University: 3.7%
    Harvard University: 3.4%
    Washington University in St. Louis: 3%

It’s unsurprising to me to see some of the more popular 
Computer Science universities at the top. Many of them 
have very large CS programs which bias the data. Even 
knowing about the existence of such fellowships biases 
towards such universities. The trends are promising, and 
the proportion of candidates from, for example, smaller 
liberal arts colleges and historically-black colleges and 
universities have grown significantly in the past years! 
As a reviewer, I actually wish I’d see more applicants 
from smaller CS programs and lesser-known universities 
and I’d like to personally encourage students from 
colleges not on this list to apply to the Kleiner Fellows 
Program in the years to come.
